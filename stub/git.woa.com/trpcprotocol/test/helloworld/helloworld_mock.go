// Code generated by MockGen. DO NOT EDIT.
// Source: stub/git.woa.com/trpcprotocol/test/helloworld/helloworld.trpc.go

// Package helloworld is a generated GoMock package.
package helloworld

import (
	context "context"
	reflect "reflect"

	client "git.code.oa.com/trpc-go/trpc-go/client"
	gomock "github.com/golang/mock/gomock"
)

// MockGreeterRpcService is a mock of GreeterRpcService interface.
type MockGreeterRpcService struct {
	ctrl     *gomock.Controller
	recorder *MockGreeterRpcServiceMockRecorder
}

// MockGreeterRpcServiceMockRecorder is the mock recorder for MockGreeterRpcService.
type MockGreeterRpcServiceMockRecorder struct {
	mock *MockGreeterRpcService
}

// NewMockGreeterRpcService creates a new mock instance.
func NewMockGreeterRpcService(ctrl *gomock.Controller) *MockGreeterRpcService {
	mock := &MockGreeterRpcService{ctrl: ctrl}
	mock.recorder = &MockGreeterRpcServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGreeterRpcService) EXPECT() *MockGreeterRpcServiceMockRecorder {
	return m.recorder
}

// SayHello mocks base method.
func (m *MockGreeterRpcService) SayHello(ctx context.Context, req *HelloRequest) (*HelloReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SayHello", ctx, req)
	ret0, _ := ret[0].(*HelloReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SayHello indicates an expected call of SayHello.
func (mr *MockGreeterRpcServiceMockRecorder) SayHello(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SayHello", reflect.TypeOf((*MockGreeterRpcService)(nil).SayHello), ctx, req)
}

// SayHi mocks base method.
func (m *MockGreeterRpcService) SayHi(ctx context.Context, req *HelloRequest) (*HelloReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SayHi", ctx, req)
	ret0, _ := ret[0].(*HelloReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SayHi indicates an expected call of SayHi.
func (mr *MockGreeterRpcServiceMockRecorder) SayHi(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SayHi", reflect.TypeOf((*MockGreeterRpcService)(nil).SayHi), ctx, req)
}

// MockGreeterHttpService is a mock of GreeterHttpService interface.
type MockGreeterHttpService struct {
	ctrl     *gomock.Controller
	recorder *MockGreeterHttpServiceMockRecorder
}

// MockGreeterHttpServiceMockRecorder is the mock recorder for MockGreeterHttpService.
type MockGreeterHttpServiceMockRecorder struct {
	mock *MockGreeterHttpService
}

// NewMockGreeterHttpService creates a new mock instance.
func NewMockGreeterHttpService(ctrl *gomock.Controller) *MockGreeterHttpService {
	mock := &MockGreeterHttpService{ctrl: ctrl}
	mock.recorder = &MockGreeterHttpServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGreeterHttpService) EXPECT() *MockGreeterHttpServiceMockRecorder {
	return m.recorder
}

// SayHello mocks base method.
func (m *MockGreeterHttpService) SayHello(ctx context.Context, req *HelloRequest) (*HelloReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SayHello", ctx, req)
	ret0, _ := ret[0].(*HelloReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SayHello indicates an expected call of SayHello.
func (mr *MockGreeterHttpServiceMockRecorder) SayHello(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SayHello", reflect.TypeOf((*MockGreeterHttpService)(nil).SayHello), ctx, req)
}

// SayHi mocks base method.
func (m *MockGreeterHttpService) SayHi(ctx context.Context, req *HelloRequest) (*HelloReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SayHi", ctx, req)
	ret0, _ := ret[0].(*HelloReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SayHi indicates an expected call of SayHi.
func (mr *MockGreeterHttpServiceMockRecorder) SayHi(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SayHi", reflect.TypeOf((*MockGreeterHttpService)(nil).SayHi), ctx, req)
}

// MockGreeterRpcClientProxy is a mock of GreeterRpcClientProxy interface.
type MockGreeterRpcClientProxy struct {
	ctrl     *gomock.Controller
	recorder *MockGreeterRpcClientProxyMockRecorder
}

// MockGreeterRpcClientProxyMockRecorder is the mock recorder for MockGreeterRpcClientProxy.
type MockGreeterRpcClientProxyMockRecorder struct {
	mock *MockGreeterRpcClientProxy
}

// NewMockGreeterRpcClientProxy creates a new mock instance.
func NewMockGreeterRpcClientProxy(ctrl *gomock.Controller) *MockGreeterRpcClientProxy {
	mock := &MockGreeterRpcClientProxy{ctrl: ctrl}
	mock.recorder = &MockGreeterRpcClientProxyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGreeterRpcClientProxy) EXPECT() *MockGreeterRpcClientProxyMockRecorder {
	return m.recorder
}

// SayHello mocks base method.
func (m *MockGreeterRpcClientProxy) SayHello(ctx context.Context, req *HelloRequest, opts ...client.Option) (*HelloReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SayHello", varargs...)
	ret0, _ := ret[0].(*HelloReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SayHello indicates an expected call of SayHello.
func (mr *MockGreeterRpcClientProxyMockRecorder) SayHello(ctx, req interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SayHello", reflect.TypeOf((*MockGreeterRpcClientProxy)(nil).SayHello), varargs...)
}

// SayHi mocks base method.
func (m *MockGreeterRpcClientProxy) SayHi(ctx context.Context, req *HelloRequest, opts ...client.Option) (*HelloReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SayHi", varargs...)
	ret0, _ := ret[0].(*HelloReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SayHi indicates an expected call of SayHi.
func (mr *MockGreeterRpcClientProxyMockRecorder) SayHi(ctx, req interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SayHi", reflect.TypeOf((*MockGreeterRpcClientProxy)(nil).SayHi), varargs...)
}

// MockGreeterHttpClientProxy is a mock of GreeterHttpClientProxy interface.
type MockGreeterHttpClientProxy struct {
	ctrl     *gomock.Controller
	recorder *MockGreeterHttpClientProxyMockRecorder
}

// MockGreeterHttpClientProxyMockRecorder is the mock recorder for MockGreeterHttpClientProxy.
type MockGreeterHttpClientProxyMockRecorder struct {
	mock *MockGreeterHttpClientProxy
}

// NewMockGreeterHttpClientProxy creates a new mock instance.
func NewMockGreeterHttpClientProxy(ctrl *gomock.Controller) *MockGreeterHttpClientProxy {
	mock := &MockGreeterHttpClientProxy{ctrl: ctrl}
	mock.recorder = &MockGreeterHttpClientProxyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGreeterHttpClientProxy) EXPECT() *MockGreeterHttpClientProxyMockRecorder {
	return m.recorder
}

// SayHello mocks base method.
func (m *MockGreeterHttpClientProxy) SayHello(ctx context.Context, req *HelloRequest, opts ...client.Option) (*HelloReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SayHello", varargs...)
	ret0, _ := ret[0].(*HelloReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SayHello indicates an expected call of SayHello.
func (mr *MockGreeterHttpClientProxyMockRecorder) SayHello(ctx, req interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SayHello", reflect.TypeOf((*MockGreeterHttpClientProxy)(nil).SayHello), varargs...)
}

// SayHi mocks base method.
func (m *MockGreeterHttpClientProxy) SayHi(ctx context.Context, req *HelloRequest, opts ...client.Option) (*HelloReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SayHi", varargs...)
	ret0, _ := ret[0].(*HelloReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SayHi indicates an expected call of SayHi.
func (mr *MockGreeterHttpClientProxyMockRecorder) SayHi(ctx, req interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SayHi", reflect.TypeOf((*MockGreeterHttpClientProxy)(nil).SayHi), varargs...)
}
