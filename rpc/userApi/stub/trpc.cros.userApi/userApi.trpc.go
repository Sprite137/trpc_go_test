// Code generated by trpc-go/trpc-go-cmdline v2.6.2. DO NOT EDIT.
// source: userApi.proto

package trpc_cros_userApi

import (
	"context"
	"errors"
	"fmt"

	_ "git.code.oa.com/trpc-go/trpc-go"
	"git.code.oa.com/trpc-go/trpc-go/client"
	"git.code.oa.com/trpc-go/trpc-go/codec"
	_ "git.code.oa.com/trpc-go/trpc-go/http"
	"git.code.oa.com/trpc-go/trpc-go/server"
	"git.code.oa.com/trpc-go/trpc-go/stream"
)

// START ======================================= Server Service Definition ======================================= START

// UserApiService defines service.
type UserApiService interface {
	// GetUserInfo 获取用户信息
	GetUserInfo(ctx context.Context, req *Id) (*UserInfo, error)
	// SaveUser 保存用户
	SaveUser(ctx context.Context, req *UserParams) (*Id, error)

	BatchSaveUser(UserApi_BatchSaveUserServer) error
}

func UserApiService_GetUserInfo_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &Id{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(UserApiService).GetUserInfo(ctx, reqbody.(*Id))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func UserApiService_SaveUser_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &UserParams{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(UserApiService).SaveUser(ctx, reqbody.(*UserParams))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func UserApiService_BatchSaveUser_Handler(srv interface{}, stream server.Stream) error {
	return srv.(UserApiService).BatchSaveUser(&userApiBatchSaveUserServer{stream})
}

type UserApi_BatchSaveUserServer interface {
	Send(*Id) error
	Recv() (*UserParams, error)
	server.Stream
}

type userApiBatchSaveUserServer struct {
	server.Stream
}

func (x *userApiBatchSaveUserServer) Send(m *Id) error {
	return x.Stream.SendMsg(m)
}

func (x *userApiBatchSaveUserServer) Recv() (*UserParams, error) {
	m := new(UserParams)
	if err := x.Stream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// UserApiServer_ServiceDesc descriptor for server.RegisterService.
var UserApiServer_ServiceDesc = server.ServiceDesc{
	ServiceName:  "trpc.cros.userApi.UserApi",
	HandlerType:  ((*UserApiService)(nil)),
	StreamHandle: stream.NewStreamDispatcher(),
	Methods: []server.Method{
		{
			Name: "/trpc.cros.userApi.UserApi/GetUserInfo",
			Func: UserApiService_GetUserInfo_Handler,
		},
		{
			Name: "/trpc.cros.userApi.UserApi/SaveUser",
			Func: UserApiService_SaveUser_Handler,
		},
	},
	Streams: []server.StreamDesc{
		{
			StreamName:    "/trpc.cros.userApi.UserApi/BatchSaveUser",
			Handler:       UserApiService_BatchSaveUser_Handler,
			ServerStreams: true,
		},
	},
}

// RegisterUserApiService registers service.
func RegisterUserApiService(s server.Service, svr UserApiService) {
	if err := s.Register(&UserApiServer_ServiceDesc, svr); err != nil {
		panic(fmt.Sprintf("UserApi register error:%v", err))
	}
}

// START --------------------------------- Default Unimplemented Server Service --------------------------------- START

type UnimplementedUserApi struct{}

// GetUserInfo 获取用户信息
func (s *UnimplementedUserApi) GetUserInfo(ctx context.Context, req *Id) (*UserInfo, error) {
	return nil, errors.New("rpc GetUserInfo of service UserApi is not implemented")
}

// SaveUser 保存用户
func (s *UnimplementedUserApi) SaveUser(ctx context.Context, req *UserParams) (*Id, error) {
	return nil, errors.New("rpc SaveUser of service UserApi is not implemented")
}
func (s *UnimplementedUserApi) BatchSaveUser(stream UserApi_BatchSaveUserServer) error {
	return errors.New("rpc BatchSaveUser of service UserApi is not implemented")
}

// END --------------------------------- Default Unimplemented Server Service --------------------------------- END

// END ======================================= Server Service Definition ======================================= END

// START ======================================= Client Service Definition ======================================= START

// UserApiClientProxy defines service client proxy
type UserApiClientProxy interface {
	// GetUserInfo 获取用户信息
	GetUserInfo(ctx context.Context, req *Id, opts ...client.Option) (rsp *UserInfo, err error)
	// SaveUser 保存用户
	SaveUser(ctx context.Context, req *UserParams, opts ...client.Option) (rsp *Id, err error)

	BatchSaveUser(ctx context.Context, opts ...client.Option) (UserApi_BatchSaveUserClient, error)
}

type UserApiClientProxyImpl struct {
	client       client.Client
	streamClient stream.Client
	opts         []client.Option
}

var NewUserApiClientProxy = func(opts ...client.Option) UserApiClientProxy {
	return &UserApiClientProxyImpl{client: client.DefaultClient, streamClient: stream.DefaultStreamClient, opts: opts}
}

func (c *UserApiClientProxyImpl) GetUserInfo(ctx context.Context, req *Id, opts ...client.Option) (*UserInfo, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/trpc.cros.userApi.UserApi/GetUserInfo")
	msg.WithCalleeServiceName(UserApiServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("cros")
	msg.WithCalleeServer("userApi")
	msg.WithCalleeService("UserApi")
	msg.WithCalleeMethod("GetUserInfo")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &UserInfo{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *UserApiClientProxyImpl) SaveUser(ctx context.Context, req *UserParams, opts ...client.Option) (*Id, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/trpc.cros.userApi.UserApi/SaveUser")
	msg.WithCalleeServiceName(UserApiServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("cros")
	msg.WithCalleeServer("userApi")
	msg.WithCalleeService("UserApi")
	msg.WithCalleeMethod("SaveUser")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &Id{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *UserApiClientProxyImpl) BatchSaveUser(ctx context.Context, opts ...client.Option) (UserApi_BatchSaveUserClient, error) {
	ctx, msg := codec.WithCloneMessage(ctx)

	msg.WithClientRPCName("/trpc.cros.userApi.UserApi/BatchSaveUser")
	msg.WithCalleeServiceName(UserApiServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("cros")
	msg.WithCalleeServer("userApi")
	msg.WithCalleeService("UserApi")
	msg.WithCalleeMethod("BatchSaveUser")
	msg.WithSerializationType(codec.SerializationTypePB)

	clientStreamDesc := &client.ClientStreamDesc{}
	clientStreamDesc.StreamName = "/trpc.cros.userApi.UserApi/BatchSaveUser"
	clientStreamDesc.ClientStreams = true
	clientStreamDesc.ServerStreams = true

	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)

	stream, err := c.streamClient.NewStream(ctx, clientStreamDesc, "/trpc.cros.userApi.UserApi/BatchSaveUser", callopts...)
	if err != nil {
		return nil, err
	}
	x := &userApiBatchSaveUserClient{stream}
	return x, nil
}

type UserApi_BatchSaveUserClient interface {
	Send(*UserParams) error
	Recv() (*Id, error)
	client.ClientStream
}

type userApiBatchSaveUserClient struct {
	client.ClientStream
}

func (x *userApiBatchSaveUserClient) Send(m *UserParams) error {
	return x.ClientStream.SendMsg(m)
}

func (x *userApiBatchSaveUserClient) Recv() (*Id, error) {
	m := new(Id)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// END ======================================= Client Service Definition ======================================= END
