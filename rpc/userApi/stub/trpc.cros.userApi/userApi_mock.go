// Code generated by MockGen. DO NOT EDIT.
// Source: stub/trpc.cros.userApi/userApi.trpc.go

// Package trpc_cros_userApi is a generated GoMock package.
package trpc_cros_userApi

import (
	context "context"
	reflect "reflect"

	client "git.code.oa.com/trpc-go/trpc-go/client"
	gomock "github.com/golang/mock/gomock"
)

// MockUserApiService is a mock of UserApiService interface.
type MockUserApiService struct {
	ctrl     *gomock.Controller
	recorder *MockUserApiServiceMockRecorder
}

// MockUserApiServiceMockRecorder is the mock recorder for MockUserApiService.
type MockUserApiServiceMockRecorder struct {
	mock *MockUserApiService
}

// NewMockUserApiService creates a new mock instance.
func NewMockUserApiService(ctrl *gomock.Controller) *MockUserApiService {
	mock := &MockUserApiService{ctrl: ctrl}
	mock.recorder = &MockUserApiServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserApiService) EXPECT() *MockUserApiServiceMockRecorder {
	return m.recorder
}

// BatchSaveUser mocks base method.
func (m *MockUserApiService) BatchSaveUser(arg0 UserApi_BatchSaveUserServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchSaveUser", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchSaveUser indicates an expected call of BatchSaveUser.
func (mr *MockUserApiServiceMockRecorder) BatchSaveUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchSaveUser", reflect.TypeOf((*MockUserApiService)(nil).BatchSaveUser), arg0)
}

// GetUserInfo mocks base method.
func (m *MockUserApiService) GetUserInfo(ctx context.Context, req *Id) (*UserInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserInfo", ctx, req)
	ret0, _ := ret[0].(*UserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserInfo indicates an expected call of GetUserInfo.
func (mr *MockUserApiServiceMockRecorder) GetUserInfo(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserInfo", reflect.TypeOf((*MockUserApiService)(nil).GetUserInfo), ctx, req)
}

// SaveUser mocks base method.
func (m *MockUserApiService) SaveUser(ctx context.Context, req *UserParams) (*Id, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveUser", ctx, req)
	ret0, _ := ret[0].(*Id)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveUser indicates an expected call of SaveUser.
func (mr *MockUserApiServiceMockRecorder) SaveUser(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveUser", reflect.TypeOf((*MockUserApiService)(nil).SaveUser), ctx, req)
}

// MockUserApi_BatchSaveUserServer is a mock of UserApi_BatchSaveUserServer interface.
type MockUserApi_BatchSaveUserServer struct {
	ctrl     *gomock.Controller
	recorder *MockUserApi_BatchSaveUserServerMockRecorder
}

// MockUserApi_BatchSaveUserServerMockRecorder is the mock recorder for MockUserApi_BatchSaveUserServer.
type MockUserApi_BatchSaveUserServerMockRecorder struct {
	mock *MockUserApi_BatchSaveUserServer
}

// NewMockUserApi_BatchSaveUserServer creates a new mock instance.
func NewMockUserApi_BatchSaveUserServer(ctrl *gomock.Controller) *MockUserApi_BatchSaveUserServer {
	mock := &MockUserApi_BatchSaveUserServer{ctrl: ctrl}
	mock.recorder = &MockUserApi_BatchSaveUserServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserApi_BatchSaveUserServer) EXPECT() *MockUserApi_BatchSaveUserServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockUserApi_BatchSaveUserServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockUserApi_BatchSaveUserServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockUserApi_BatchSaveUserServer)(nil).Context))
}

// Recv mocks base method.
func (m *MockUserApi_BatchSaveUserServer) Recv() (*UserParams, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*UserParams)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockUserApi_BatchSaveUserServerMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockUserApi_BatchSaveUserServer)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockUserApi_BatchSaveUserServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockUserApi_BatchSaveUserServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockUserApi_BatchSaveUserServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockUserApi_BatchSaveUserServer) Send(arg0 *Id) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockUserApi_BatchSaveUserServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockUserApi_BatchSaveUserServer)(nil).Send), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockUserApi_BatchSaveUserServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockUserApi_BatchSaveUserServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockUserApi_BatchSaveUserServer)(nil).SendMsg), m)
}

// MockUserApiClientProxy is a mock of UserApiClientProxy interface.
type MockUserApiClientProxy struct {
	ctrl     *gomock.Controller
	recorder *MockUserApiClientProxyMockRecorder
}

// MockUserApiClientProxyMockRecorder is the mock recorder for MockUserApiClientProxy.
type MockUserApiClientProxyMockRecorder struct {
	mock *MockUserApiClientProxy
}

// NewMockUserApiClientProxy creates a new mock instance.
func NewMockUserApiClientProxy(ctrl *gomock.Controller) *MockUserApiClientProxy {
	mock := &MockUserApiClientProxy{ctrl: ctrl}
	mock.recorder = &MockUserApiClientProxyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserApiClientProxy) EXPECT() *MockUserApiClientProxyMockRecorder {
	return m.recorder
}

// BatchSaveUser mocks base method.
func (m *MockUserApiClientProxy) BatchSaveUser(ctx context.Context, opts ...client.Option) (UserApi_BatchSaveUserClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchSaveUser", varargs...)
	ret0, _ := ret[0].(UserApi_BatchSaveUserClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchSaveUser indicates an expected call of BatchSaveUser.
func (mr *MockUserApiClientProxyMockRecorder) BatchSaveUser(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchSaveUser", reflect.TypeOf((*MockUserApiClientProxy)(nil).BatchSaveUser), varargs...)
}

// GetUserInfo mocks base method.
func (m *MockUserApiClientProxy) GetUserInfo(ctx context.Context, req *Id, opts ...client.Option) (*UserInfo, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUserInfo", varargs...)
	ret0, _ := ret[0].(*UserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserInfo indicates an expected call of GetUserInfo.
func (mr *MockUserApiClientProxyMockRecorder) GetUserInfo(ctx, req interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserInfo", reflect.TypeOf((*MockUserApiClientProxy)(nil).GetUserInfo), varargs...)
}

// SaveUser mocks base method.
func (m *MockUserApiClientProxy) SaveUser(ctx context.Context, req *UserParams, opts ...client.Option) (*Id, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SaveUser", varargs...)
	ret0, _ := ret[0].(*Id)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveUser indicates an expected call of SaveUser.
func (mr *MockUserApiClientProxyMockRecorder) SaveUser(ctx, req interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveUser", reflect.TypeOf((*MockUserApiClientProxy)(nil).SaveUser), varargs...)
}

// MockUserApi_BatchSaveUserClient is a mock of UserApi_BatchSaveUserClient interface.
type MockUserApi_BatchSaveUserClient struct {
	ctrl     *gomock.Controller
	recorder *MockUserApi_BatchSaveUserClientMockRecorder
}

// MockUserApi_BatchSaveUserClientMockRecorder is the mock recorder for MockUserApi_BatchSaveUserClient.
type MockUserApi_BatchSaveUserClientMockRecorder struct {
	mock *MockUserApi_BatchSaveUserClient
}

// NewMockUserApi_BatchSaveUserClient creates a new mock instance.
func NewMockUserApi_BatchSaveUserClient(ctrl *gomock.Controller) *MockUserApi_BatchSaveUserClient {
	mock := &MockUserApi_BatchSaveUserClient{ctrl: ctrl}
	mock.recorder = &MockUserApi_BatchSaveUserClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserApi_BatchSaveUserClient) EXPECT() *MockUserApi_BatchSaveUserClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockUserApi_BatchSaveUserClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockUserApi_BatchSaveUserClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockUserApi_BatchSaveUserClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockUserApi_BatchSaveUserClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockUserApi_BatchSaveUserClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockUserApi_BatchSaveUserClient)(nil).Context))
}

// Recv mocks base method.
func (m *MockUserApi_BatchSaveUserClient) Recv() (*Id, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*Id)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockUserApi_BatchSaveUserClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockUserApi_BatchSaveUserClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockUserApi_BatchSaveUserClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockUserApi_BatchSaveUserClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockUserApi_BatchSaveUserClient)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockUserApi_BatchSaveUserClient) Send(arg0 *UserParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockUserApi_BatchSaveUserClientMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockUserApi_BatchSaveUserClient)(nil).Send), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockUserApi_BatchSaveUserClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockUserApi_BatchSaveUserClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockUserApi_BatchSaveUserClient)(nil).SendMsg), m)
}
