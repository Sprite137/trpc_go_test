// Code generated by trpc-go/trpc-go-cmdline v2.6.2. DO NOT EDIT.
// source: bookApi.proto

package trpc_cros_bookApi

import (
	"context"
	"errors"
	"fmt"

	_ "git.code.oa.com/trpc-go/trpc-go"
	"git.code.oa.com/trpc-go/trpc-go/client"
	"git.code.oa.com/trpc-go/trpc-go/codec"
	_ "git.code.oa.com/trpc-go/trpc-go/http"
	"git.code.oa.com/trpc-go/trpc-go/server"
)

// START ======================================= Server Service Definition ======================================= START

// BookApiService defines service.
type BookApiService interface {
	// GetBookInfo 获取书籍信息
	GetBookInfo(ctx context.Context, req *BookParams) (*Book, error)
	// SaveBook 保存书籍
	SaveBook(ctx context.Context, req *Book) (*BookId, error)
}

func BookApiService_GetBookInfo_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &BookParams{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(BookApiService).GetBookInfo(ctx, reqbody.(*BookParams))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func BookApiService_SaveBook_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &Book{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(BookApiService).SaveBook(ctx, reqbody.(*Book))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

// BookApiServer_ServiceDesc descriptor for server.RegisterService.
var BookApiServer_ServiceDesc = server.ServiceDesc{
	ServiceName: "trpc.cros.bookApi.BookApi",
	HandlerType: ((*BookApiService)(nil)),
	Methods: []server.Method{
		{
			Name: "/trpc.cros.bookApi.BookApi/GetBookInfo",
			Func: BookApiService_GetBookInfo_Handler,
		},
		{
			Name: "/trpc.cros.bookApi.BookApi/SaveBook",
			Func: BookApiService_SaveBook_Handler,
		},
	},
}

// RegisterBookApiService registers service.
func RegisterBookApiService(s server.Service, svr BookApiService) {
	if err := s.Register(&BookApiServer_ServiceDesc, svr); err != nil {
		panic(fmt.Sprintf("BookApi register error:%v", err))
	}
}

// START --------------------------------- Default Unimplemented Server Service --------------------------------- START

type UnimplementedBookApi struct{}

// GetBookInfo 获取书籍信息
func (s *UnimplementedBookApi) GetBookInfo(ctx context.Context, req *BookParams) (*Book, error) {
	return nil, errors.New("rpc GetBookInfo of service BookApi is not implemented")
}

// SaveBook 保存书籍
func (s *UnimplementedBookApi) SaveBook(ctx context.Context, req *Book) (*BookId, error) {
	return nil, errors.New("rpc SaveBook of service BookApi is not implemented")
}

// END --------------------------------- Default Unimplemented Server Service --------------------------------- END

// END ======================================= Server Service Definition ======================================= END

// START ======================================= Client Service Definition ======================================= START

// BookApiClientProxy defines service client proxy
type BookApiClientProxy interface {
	// GetBookInfo 获取书籍信息
	GetBookInfo(ctx context.Context, req *BookParams, opts ...client.Option) (rsp *Book, err error)
	// SaveBook 保存书籍
	SaveBook(ctx context.Context, req *Book, opts ...client.Option) (rsp *BookId, err error)
}

type BookApiClientProxyImpl struct {
	client client.Client
	opts   []client.Option
}

var NewBookApiClientProxy = func(opts ...client.Option) BookApiClientProxy {
	return &BookApiClientProxyImpl{client: client.DefaultClient, opts: opts}
}

func (c *BookApiClientProxyImpl) GetBookInfo(ctx context.Context, req *BookParams, opts ...client.Option) (*Book, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/trpc.cros.bookApi.BookApi/GetBookInfo")
	msg.WithCalleeServiceName(BookApiServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("cros")
	msg.WithCalleeServer("bookApi")
	msg.WithCalleeService("BookApi")
	msg.WithCalleeMethod("GetBookInfo")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &Book{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *BookApiClientProxyImpl) SaveBook(ctx context.Context, req *Book, opts ...client.Option) (*BookId, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/trpc.cros.bookApi.BookApi/SaveBook")
	msg.WithCalleeServiceName(BookApiServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("cros")
	msg.WithCalleeServer("bookApi")
	msg.WithCalleeService("BookApi")
	msg.WithCalleeMethod("SaveBook")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &BookId{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

// END ======================================= Client Service Definition ======================================= END
