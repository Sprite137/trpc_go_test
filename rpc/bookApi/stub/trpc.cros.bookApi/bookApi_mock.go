// Code generated by MockGen. DO NOT EDIT.
// Source: stub/trpc.cros.bookApi/bookApi.trpc.go

// Package trpc_cros_bookApi is a generated GoMock package.
package trpc_cros_bookApi

import (
	context "context"
	reflect "reflect"

	client "git.code.oa.com/trpc-go/trpc-go/client"
	gomock "github.com/golang/mock/gomock"
)

// MockBookApiService is a mock of BookApiService interface.
type MockBookApiService struct {
	ctrl     *gomock.Controller
	recorder *MockBookApiServiceMockRecorder
}

// MockBookApiServiceMockRecorder is the mock recorder for MockBookApiService.
type MockBookApiServiceMockRecorder struct {
	mock *MockBookApiService
}

// NewMockBookApiService creates a new mock instance.
func NewMockBookApiService(ctrl *gomock.Controller) *MockBookApiService {
	mock := &MockBookApiService{ctrl: ctrl}
	mock.recorder = &MockBookApiServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBookApiService) EXPECT() *MockBookApiServiceMockRecorder {
	return m.recorder
}

// GetBookInfo mocks base method.
func (m *MockBookApiService) GetBookInfo(ctx context.Context, req *BookParams) (*Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBookInfo", ctx, req)
	ret0, _ := ret[0].(*Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBookInfo indicates an expected call of GetBookInfo.
func (mr *MockBookApiServiceMockRecorder) GetBookInfo(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBookInfo", reflect.TypeOf((*MockBookApiService)(nil).GetBookInfo), ctx, req)
}

// SaveBook mocks base method.
func (m *MockBookApiService) SaveBook(ctx context.Context, req *Book) (*BookId, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveBook", ctx, req)
	ret0, _ := ret[0].(*BookId)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveBook indicates an expected call of SaveBook.
func (mr *MockBookApiServiceMockRecorder) SaveBook(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveBook", reflect.TypeOf((*MockBookApiService)(nil).SaveBook), ctx, req)
}

// MockBookApiClientProxy is a mock of BookApiClientProxy interface.
type MockBookApiClientProxy struct {
	ctrl     *gomock.Controller
	recorder *MockBookApiClientProxyMockRecorder
}

// MockBookApiClientProxyMockRecorder is the mock recorder for MockBookApiClientProxy.
type MockBookApiClientProxyMockRecorder struct {
	mock *MockBookApiClientProxy
}

// NewMockBookApiClientProxy creates a new mock instance.
func NewMockBookApiClientProxy(ctrl *gomock.Controller) *MockBookApiClientProxy {
	mock := &MockBookApiClientProxy{ctrl: ctrl}
	mock.recorder = &MockBookApiClientProxyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBookApiClientProxy) EXPECT() *MockBookApiClientProxyMockRecorder {
	return m.recorder
}

// GetBookInfo mocks base method.
func (m *MockBookApiClientProxy) GetBookInfo(ctx context.Context, req *BookParams, opts ...client.Option) (*Book, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBookInfo", varargs...)
	ret0, _ := ret[0].(*Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBookInfo indicates an expected call of GetBookInfo.
func (mr *MockBookApiClientProxyMockRecorder) GetBookInfo(ctx, req interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBookInfo", reflect.TypeOf((*MockBookApiClientProxy)(nil).GetBookInfo), varargs...)
}

// SaveBook mocks base method.
func (m *MockBookApiClientProxy) SaveBook(ctx context.Context, req *Book, opts ...client.Option) (*BookId, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SaveBook", varargs...)
	ret0, _ := ret[0].(*BookId)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveBook indicates an expected call of SaveBook.
func (mr *MockBookApiClientProxyMockRecorder) SaveBook(ctx, req interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveBook", reflect.TypeOf((*MockBookApiClientProxy)(nil).SaveBook), varargs...)
}
